***************
*** 15,22 ****
          switch($matches["attr"]) {
              case "print-version-for":
                  // FIXME: Figureout a way to detect the current language (for unknownversion)
                      return $this->format->autogenVersionInfo($matches["value"], "en");
              case "generate-index-for":
                  switch($matches["value"]) {
                      case "function":
                      case "refentry":
--- 16,30 ----
          switch($matches["attr"]) {
              case "print-version-for":
                  // FIXME: Figureout a way to detect the current language (for unknownversion)
+                 if (!$this->format instanceof Index) {
                      return $this->format->autogenVersionInfo($matches["value"], "en");
+                 }
+                 return;
+ 
              case "generate-index-for":
+                 if ($this->format instanceof Index) {
+                     return;
+                 }
                  switch($matches["value"]) {
                      case "function":
                      case "refentry":
***************
*** 74,82 ****
                  }
                  break;
  
              case "generate-changelog-for":
                  $parents = explode(" ", $matches["value"]);
                  $changelogs = $this->format->getChangelogsForChildrenOf($parents);
          usort($changelogs, array(__CLASS__, "_sortByVersion"));
  
          $ret = "<table class='doctable table'><thead><tr>";
--- 82,126 ----
                  }
                  break;
  
+             case "extension-membership":
+                 if ($this->format instanceof Index) {
+                     return $this->format->setMembership($matches["value"]);
+                 }
+                 return;
+ 
+             case "generate-changelog-for-membership":
+                 if ($this->format instanceof Index) {
+                     return;
+                 }
+ 
+                 $changelogs = $this->format->getChangelogsForMembershipOf($matches["value"]);
+                 return $this->generateChangelogMarkup($changelogs);
+                 break;
+ 
              case "generate-changelog-for":
+                 if ($this->format instanceof Index) {
+                     return;
+                 }
+ 
                  $parents = explode(" ", $matches["value"]);
                  $changelogs = $this->format->getChangelogsForChildrenOf($parents);
+                 return $this->generateChangelogMarkup($changelogs);
+                 break;
+ 
+             default:
+                 trigger_error("Don't know how to handle {$matches["attr"]}", E_USER_WARNING);
+                 break;
+         }
+ 
+     }
+ 
+     // usort() callback function used in generate-changelog-for, higest (newest) version first
+     // 1.2.11 comes before 1.2.2
+     protected static function _sortByVersion($a, $b) {
+         return -1 * strnatcasecmp($a["version"], $b["version"]);
+     }
+ 
+     protected function generateChangelogMarkup($changelogs) {
          usort($changelogs, array(__CLASS__, "_sortByVersion"));
  
          $ret = "<table class='doctable table'><thead><tr>";
***************
*** 99,120 ****
          }
  
          return $ret . "</tbody></table>";
- 
-                 break;
- 
-             default:
-                 trigger_error("Don't know how to handle {$matches["attr"]}", E_USER_WARNING);
-                 break;
-         }
- 
-     }
- 
-     // usort() callback function used in generate-changelog-for, higest (newest) version first
-     // 1.2.11 comes before 1.2.2
-     protected static function _sortByVersion($a, $b) {
-         return -1 * strnatcasecmp($a["version"], $b["version"]);
      }
- 
  }
  
  /*
--- 143,149 ----
          }
  
          return $ret . "</tbody></table>";
      }
  }
  
  /*
